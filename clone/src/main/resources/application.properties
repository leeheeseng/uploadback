spring.application.name=clone
# Server
server.port=8080

#DB Connection
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/clone
spring.datasource.username=root
spring.datasource.password=dlgmltmd1!

#
#filesize
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=100MB


# Logging
logging.level.org.springframework=INFO
logging.level.com.example.bookcategory=DEBUG


# JPA 설정
# JPA DB 연동
# 어떤 RDBMS를 사용할 지 지정
spring.jpa.database=mysql
# DBMS마다 구문이나 문법이 조금씩 다르기 때문에
# JPA에서 어떤 DBMS의 구문이나 문법을 사용할 것인지 지정
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# JPA의 동작 방식 지정(ddl-auto)
# create: 어플리케이션이 구동될 때 모든 테이블을 삭제했다가 다시 생성
# update: 테이블과 데이터는 유지되면서 변경사항이 있을 때만 반영
# drop: 어플리케이션이 구동될 때 테이블을 생성하고 종료될 때 테이블을 삭제
spring.jpa.hibernate.ddl-auto=update
# JPA에서 실행되는 쿼리문을 콘솔에 표시할 것인지 여부를 지정
spring.jpa.show-sql=true
# JPA에서 쿼리를 콘솔에 표출할 때 형식에 맞춰서 표출할 것인지 여부를 지정
# 들여쓰기 및 줄바꿈을 표시할 것인지 지정
spring.jpa.properties.hibernate.format_sql=true




# SQL 로그 파일 분리 + 메서드 이름 포함
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.file.name=logs/application.log  # 기본 로그 파일

# SQL 전용 로그 파일 설정 (Logback 필요)
logging.logback.rollingpolicy.file-name-pattern=logs/sql-%d{yyyy-MM-dd}.log
logging.logback.rollingpolicy.max-history=7